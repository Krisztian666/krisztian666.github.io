File Handling

Android uses a file system that's similar to disk-based file 
systems on other platforms. This lesson describes how to work with 
the Android file system to read and write files with the File APIs.

This lesson shows how to perform basic file-related tasks in your app. 
The lesson assumes that you are familiar with the basics of the Linux 
file system and the standard file input/output APIs in java.io.
The ToDo list will be saved to a file.


Internal or External Storage

All Android devices have two file storage areas: "internal" and "external" 
storage. These names come from the early days of Android, when most 
devices offered built-in non-volatile memory (internal storage), plus 
a removable storage medium such as a micro SD card (external storage).


Internal storage:

- It's always available.
- Files saved here are accessible by only your app by default.
- When the user uninstalls your app, the system removes all 
  your app's files from internal storage.

Internal storage is best when you want to be sure that neither 
the user nor other apps can access your files.


External storage:

- It's not always available, because the user can mount the external 
  storage as USB storage and in some cases remove it from the device.
- It's world-readable, so files saved here may be read outside of your control.
- When the user uninstalls your app, the system removes your app's 
  files from here only if you save them in the directory 
  from getExternalFilesDir().

External storage is the best place for files that don't require access 
restrictions and for files that you want to share with other apps or 
allow the user to access with a computer.
To write to the external storage, you must request the 
WRITE_EXTERNAL_STORAGE permission in your manifest file


Save a File on Internal Storage

The ToDo application will save the data to the Internal Storage.
Create FileHandler.